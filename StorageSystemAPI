print("Loading StorageSystemAPI")
StorageSystem = {}
StorageSystem.__index = StorageSystem
Output = {}
Output.__index = Output






function logposition()
    local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent("modem_message")

    local pos = textutils.unserialise(message)

    return pos
end





function StorageSystem:create(lSpeed, lRows, lWidth, lHeight)
    local obj = {}
    setmetatable(obj, StorageSystem)
    --Set Variables
    self.speed = lSpeed

    self.dimensions = {
        width = lWidth,
        length = (lRows * 4) + 3,
        rows = lRows,
        height = lHeight - 2
    }

    self.position = {
        x = 0,
        y = 0,
        z = 0
    }
    return obj
end

function StorageSystem:Move(x, y, z)
    local clutch = "right"
    local gearshift = "left"
    local gantry1 = "top"
    local gantry2 = "front"
    local sticker = "back"

    --math.ceil((self.position.z-2)/4-1) <<coord to lane#
    --self.position.z*4+2 <<lane# to coord
    
    local function travelDelay(blocks)
        sleep(51.2/self.speed+25.6/self.speed*(blocks+1/60*blocks))
    end

    function moveX(newX)
        self.position = logposition()
        local dX = newX - self.position.x 
        
        if dX == 0 then
            return 0
        elseif dX > 0 then
            redstone.setOutput(gearshift, true)
        elseif dX < 0 then
            redstone.setOutput(gearshift, false)
        end
        redstone.setOutput(gantry1, true)
        redstone.setOutput(gantry2, true)
        redstone.setOutput(clutch, false)
        travelDelay(math.abs(dX-1))
        redstone.setOutput(clutch, true)
        redstone.setOutput(gantry1, false)
        redstone.setOutput(gantry2, false)
        redstone.setOutput(gearshift, false)
        
        self.position = logposition()
    end
    function moveY(newY)
        self.position = logposition()
        local dY = newY - self.position.y
        if dY == 0 then
            return 0
        elseif dY > 0 then
            redstone.setOutput(gearshift, false)
        elseif dY < 0 then
            redstone.setOutput(gearshift, true)
        end
        redstone.setOutput(gantry1, true)
        redstone.setOutput(clutch, false)
        travelDelay(math.abs(dY))
        redstone.setOutput(clutch, true)
        redstone.setOutput(gantry1, false)
        redstone.setOutput(gearshift, false)
        self.position = logposition()
    end
    function moveZ(newZ)
        self.position = logposition()
        local dZ = newZ - self.position.z
        
        if dZ == 0 then
            return 0
        elseif dZ > 0 then
            redstone.setOutput(gearshift, false)
        elseif dZ < 0 then
            redstone.setOutput(gearshift, true)
        end
        redstone.setOutput(clutch, false)
        travelDelay(math.abs(dZ))
        redstone.setOutput(clutch, true)
        redstone.setOutput(gearshift, false)
        self.position = logposition()
    end
    --demo order: 0, 0, 1

    local currentlane = math.ceil((self.position.z-2)/4)

    local function moveLane(x, y, z)
        if math.ceil((z-2)/4-1) ~= currentlane then
            --move over barrels
            moveY(self.dimensions.height)
            move(z)
            move(x)
            move(y)
        else
            --move naar positie in lane
            moveX(x)        
            moveZ(z)
            moveY(y)
        end
    end
    local function calculateLane(z,dropoff)
        if dropoff then
            -- use xyz system
    
        return z
        else
            -- use lane system from xyz
            laneCoord = math.ceil((self.position.z-2)/4)
        return laneCoord
        end    
    end

zLane = calculateLane(z, false)    
moveLane(x,y,zLane)    

    

    
    
end







print("loaded StorageSystemAPI")
    --[[redstone.setAnalogOutput("right", clutch)
    redstone.setAnalogOutput("left", gearshift)
    redstone.setAnalogOutput("top", g1)
    redstone.setAnalogOutput("back", sticker)
    redstone.setAnalogOutput("front", g2)]]


